'use client';

import { useState, useEffect } from 'react';
import { z } from 'zod';

export const ApgarItemSchema = z.object({
  id: z.string(),
  label: z.string(),
  options: z.array(z.object({
    value: z.number(),
    label: z.string(),
    description: z.string(),
  })),
});

export const ApgarSchema = z.object({
  time: z.string(),
  scores: z.record(z.number()),
  total: z.number(),
});

type ApgarItem = z.infer<typeof ApgarItemSchema>;
type ApgarScore = z.infer<typeof ApgarSchema>;
type ApgarTime = '1min' | '5min' | '10min';

export const APGAR_ITEMS: ApgarItem[] = [
  {
    id: 'appearance',
    label: 'Appearance (Color)',
    options: [
      { value: 0, label: 'Blue/Pale', description: 'Body and extremities blue or pale' },
      { value: 1, label: 'Pink Body/Blue Extremities', description: 'Good color in body but extremities blue' },
      { value: 2, label: 'Completely Pink', description: 'Good color all over' },
    ],
  },
  {
    id: 'pulse',
    label: 'Pulse (Heart Rate)',
    options: [
      { value: 0, label: 'Absent', description: 'No heart rate' },
      { value: 1, label: 'Slow', description: 'Less than 100 beats per minute' },
      { value: 2, label: 'Normal', description: 'At least 100 beats per minute' },
    ],
  },
  {
    id: 'grimace',
    label: 'Grimace (Reflex Response)',
    options: [
      { value: 0, label: 'No Response', description: 'No response to stimulation' },
      { value: 1, label: 'Grimace', description: 'Grimace with stimulation' },
      { value: 2, label: 'Cough or Sneeze', description: 'Cry or pull away with stimulation' },
    ],
  },
  {
    id: 'activity',
    label: 'Activity (Muscle Tone)',
    options: [
      { value: 0, label: 'Limp', description: 'No movement, limp' },
      { value: 1, label: 'Some Flexion', description: 'Some flexion of extremities' },
      { value: 2, label: 'Active Motion', description: 'Active motion' },
    ],
  },
  {
    id: 'respiration',
    label: 'Respiration',
    options: [
      { value: 0, label: 'Absent', description: 'No breathing' },
      { value: 1, label: 'Weak', description: 'Slow, irregular breathing' },
      { value: 2, label: 'Good Cry', description: 'Good, strong cry' },
    ],
  },
];

interface ApgarScoringProps {
  initialValue?: ApgarScore;
  onChange?: (score: ApgarScore) => void;
  time: ApgarTime;
}

export function ApgarScoring({ initialValue, onChange, time }: ApgarScoringProps) {
  const [scores, setScores] = useState<Record<string, number>>(
    initialValue?.scores || APGAR_ITEMS.reduce((acc, item) => ({ ...acc, [item.id]: 0 }), {})
  );

  const total = Object.values(scores).reduce((sum, score) => sum + score, 0);

  useEffect(() => {
    onChange?.({
      time,
      scores,
      total,
    });
  }, [scores, time, onChange, total]);

  return (
    <div className="space-y-4">
      <div className="mb-4">
        <h3 className="text-lg font-semibold mb-2">APGAR Score - {time}</h3>
      </div>
      <table className="w-full border-collapse">
        <thead>
          <tr>
            <th className="text-left p-2 border-b">Sign</th>
            <th className="text-center p-2 border-b" colSpan={3}>Score</th>
          </tr>
        </thead>
        <tbody>
          {APGAR_ITEMS.map((item) => (
            <tr key={item.id} className="border-b">
              <td className="p-2 w-1/3">
                <div className="font-medium">{item.label}</div>
              </td>
              {item.options.map((option) => (
                <td key={option.value} className="p-2 w-1/5">
                  <button
                    type="button"
                    onClick={() => setScores({ ...scores, [item.id]: option.value })}
                    className={`w-full p-2 text-left rounded ${
                      scores[item.id] === option.value ? 'bg-blue-100' : 'hover:bg-gray-50'
                    }`}
                    title={option.description}
                  >
                    <div>{option.label}</div>
                    <div className="text-sm text-gray-600">{option.description}</div>
                  </button>
                </td>
              ))}
            </tr>
          ))}
        </tbody>
        <tfoot>
          <tr>
            <td colSpan={4} className="p-2 text-right border-t">
              <div className="text-lg font-medium">Total Score: {total}</div>
            </td>
          </tr>
        </tfoot>
      </table>
    </div>
  );
}